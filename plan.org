#+TITLE: Core Type Classes
* Introduction
** Overview
   - Scalaz
   - How to use its abstractions
   - How to find your way around
   - How to write your own abstractions
   - Focusing on three core abstractions: monoids, monads, and applicative functors
   - Pay off in the large
     - We'll be looking at very abstract abstractions. These pay off in larger codebases, where they enable very large amount of code reuse.
     - Once you become familiar with the abstractions you will start seeing them everywhere.
** What are type classes?
   - Implement functionality for any class
   - Implement multiple implementations of functionality
   - Construction in Scala
     - Type class trait
     - Concrete instances
     - Implicit parameters
     - Enriched syntax
     - Context bounds
** Setup
   - sbt and all that
* Scalaz
  - Overview
    - Utiltiies and extensions to std library
    - Type classes
  - Type classes
    - Operations
    - Laws
  - Type class implementation in Scalaz
    - Interface trick
    - Package organisation
      - Type class packages
      - Instance packages
      - Syntax packages
* Monoids
** DONE Monoid definition and examples
** Monoid Instances
   - Int, Boolean, Set
   - Semigroup vs Monoid
** Controlling Type Class Selection
*** Invariant Type Classes
    - Example
    - Algebraic data types need type declarations or "smart" constructors to return type of base trait.
*** Covariant Type Classes
    - We can specify more specific instances on subtypes but still need type declarations or smart constructors to use type classes defined on base trait
*** Contravariant Type Classes
    - Now subtypes can use type classes defined on super types, but type classes defined on sub types are less specific than those defined on super types. This is madness! Don't do it! (Looking at you, Play)
*** Conclusion
    Invariant type classes (and invariant ADTs) are the best solution, and the one adopted by Scalaz (for the most part; this is happening in 7.2 and is WIP).
*** Techniques for Controlling Selection
**** Tags
     - Out-dated solution but still used by Scalaz for backwards compatibility. Defines a subtype.
**** Value Classes
     - The solution going forward.
**** Avoiding Boilerplate
     Implicit parameters will be chained indefinitely (implicit conversions won't) so we can compose type classes in this way. Examples pls.
** Monoid Case Study
   Map/reduce (single machine parallel computation). Streaming algorithsm like HyperLogLog. Algebird library for these abstractions.
   Talk about Foldable / foldMap
* Functors
  - Functors are types like F[A] that have a map operation to produce a F[B]
  - Functor laws
  - Functor composition
    - Should we talk about functor composition here, as a lead into monad non-composition?
  - Functors aren't terribly useful on their own, though we probably know example of them already: `List`, `Option`, and so on. However, functors give us a chance to talk about kinds, which we need to know for abstractions we'll see later.
** Higher Kinds
   - Kinds are like types for types.
   - A type like `Int` has kind *
   - We also have type constructors like `List`. You have to provide a type to it to get a concrete type like `List[Int]`. This has kind * -> * and is called a higher kind.
   - We write higher kinds like F[_] in Scala
   - Enabling higher kinds (do we still need this?)
   - The [F[_] : Functor, A] pattern for using higher kinds
* Monads
** Examples
   - The ubiquity of flatMap is probably well known to Scala programmers, but let's look at some examples anyway.
     - Option: computations that could fail
     - List: filtering results. A List models all possible results.
     - Either: we have to do these annoying left and right projections and then we can flatMap. We're gonna fix this in a moment with Scalaz but let's talk about monads first
     - We can use monads with for comprehensions, which is cool
     - But there is no actual type for this abstraction in Scala. Scalaz adds one.
** Definition
   - flatMap and point
   - Laws
** Instances
   - \/
     - Fail fast error handling. Pwns Either.
   - Writer
   - Reader
   - Id
     - We can use Id to abstract over methods that may or may not use monads. For example, suppose we want to write some generic that uses a generic db connection. Some dbs are synchronoous. Some are asynchronous, returning Futures. We can unify them by using Id to wrap our synchronous results.
     - We can also use Id to test code that is generic in a monad. E.g. code that normally runs in a Future but doesn't require asynchronicity itself.
   - Maybe (is it in Scalaz 7.1?)
** Syntax
   - We mostly use for comprehensions, but sometimes it is useful to use shorthands
   - >>= and >> (from Haskell)
   - point for constructing instances
   - Others?
** Monad Case Study
   - Hadoop continued. Add possibility of failure. Add asynchronicity. Abstract over monads like a boss. Add some logging perhaps, using the Writer monad. Gosh darn these monad stacks are annoying.
* Working With Monads
** Monad Transformers
** Error Handling: MonadPlus and Optional
   - MonadPlus is handy if you have an identity / base case.
   - Is Optional a monad?
** Kleisli
* Applicative Functors
** Examples
   - Sometimes monad is too strong an abstraction. We should seek the weakest possible abstraction that fits our needs, as the weaker (and hence more general) the abstraction the more cases will fit that abstraction.
   - For example if we have a number of `Option[Int]` and we want to add up the elements within them. We can write this wtih flatMap but then we have to choose the kind of Option to return which is obvious -- it is always `Some`.
   - If we want to compose Futures in parallel. We can write this with flatMap but, as we've seen, this is actually serial composition unless we create the Futures outside of the expression. We also don't need the power of flatMap -- we just want the values inside the Futures not the ability to return a new kind of future.
   - The core thing thing here is we have a pure function that operates on the A inside an F[A] and we don't want to specify the context -- the F -- of the functor. I.e. all the contexts are known in advance. Specifically for Option ...
   - We can't use map for this because we want to transform several functors into a single result, which map can't do. (Don't believe me? Try it.)
   - The answer is the applicative functor ... binary operator to combine varying number of elements ... currying
** Definition
   - ap and pure
   - Laws
   - Every monad is an applicative (though possibly not a lawful one)
** Instances
   - All the usual monads, though not \/
   - Validation
** Syntax
   - Applicative builder. Because currying isn't idiomatic in Scala.
** Applicative Case Study
   Parallel composition of Hadoopy stuff or validation or both!
* Applications
** Pygmy Hadoop
** Validation
** CRDTs
